<%- include('../layouts/header') %>

<div class="container-fluid py-4">
  <!-- Header avec breadcrumb -->
  <div class="row mb-4">
    <div class="col-12">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item">
            <a href="/dashboard">Tableau de bord</a>
          </li>
          <li class="breadcrumb-item">
            <a href="/transactions">Transactions</a>
          </li>
          <li class="breadcrumb-item active">
            Modifier #<%= transaction.id %>
          </li>
        </ol>
      </nav>

      <h1 class="h3 mb-0">
        <i class="fas fa-edit text-warning me-2"></i>
        Modifier Transaction
      </h1>
    </div>
  </div>

  <div class="row justify-content-center">
    <div class="col-md-8 col-lg-6">
      <div class="card shadow">
        <div class="card-header bg-warning text-dark">
          <h5 class="card-title mb-0">
            <i class="fas fa-edit me-2"></i>
            Modification Transaction #<%= transaction.id %>
          </h5>
        </div>

        <form
          id="transactionForm"
          method="POST"
          action="/transactions/<%= transaction.id %>?_method=PUT"
          novalidate
        >
          <div class="card-body">
            <!-- Affichage des erreurs -->
            <% if (typeof errors !== 'undefined' && errors.length > 0) { %>
            <div class="alert alert-danger">
              <h6>
                <i class="fas fa-exclamation-triangle me-2"></i>Erreurs de
                validation :
              </h6>
              <ul class="mb-0">
                <% errors.forEach(error => { %>
                <li><%= error.msg %></li>
                <% }) %>
              </ul>
            </div>
            <% } %>

            <!-- Informations actuelles -->
            <div class="alert alert-info mb-4">
              <h6 class="alert-heading">
                <i class="fas fa-info-circle me-2"></i>
                Transaction Actuelle
              </h6>
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <span
                    class="badge bg-<%= transaction.type === 'income' ? 'success' : 'danger' %> me-2"
                  >
                    <i
                      class="fas fa-arrow-<%= transaction.type === 'income' ? 'up' : 'down' %> me-1"
                    ></i>
                    <%= transaction.type === 'income' ? 'Revenu' : 'Dépense' %>
                  </span>
                  <strong><%= transaction.category %></strong>
                </div>
                <div class="text-end">
                  <h6
                    class="text-<%= transaction.type === 'income' ? 'success' : 'danger' %> mb-0"
                  >
                    <%= transaction.type === 'income' ? '+' : '-' %><%=
                    transaction.amount.toLocaleString('fr-FR', { style:
                    'currency', currency: 'EUR' }) %>
                  </h6>
                  <small class="text-muted">
                    <%= new Date(transaction.date).toLocaleDateString('fr-FR')
                    %>
                  </small>
                </div>
              </div>
              <% if (transaction.description) { %>
              <p class="mb-0 mt-2"><%= transaction.description %></p>
              <% } %>
            </div>

            <!-- Toggle Type de Transaction -->
            <div class="mb-4">
              <label class="form-label fw-bold">Type de Transaction *</label>
              <div
                class="btn-group w-100"
                role="group"
                aria-label="Type de transaction"
              >
                <input type="radio" class="btn-check" name="type" id="income"
                value="income" <%= transaction.type === 'income' ? 'checked' :
                '' %>>
                <label class="btn btn-outline-success" for="income">
                  <i class="fas fa-arrow-up me-2"></i>
                  Revenu
                </label>

                <input type="radio" class="btn-check" name="type" id="expense"
                value="expense" <%= transaction.type === 'expense' ? 'checked' :
                '' %>>
                <label class="btn btn-outline-danger" for="expense">
                  <i class="fas fa-arrow-down me-2"></i>
                  Dépense
                </label>
              </div>
            </div>

            <!-- Montant -->
            <div class="mb-3">
              <label for="amount" class="form-label fw-bold">Montant *</label>
              <div class="input-group">
                <span class="input-group-text">€</span>
                <input
                  type="number"
                  class="form-control"
                  id="amount"
                  name="amount"
                  min="0.01"
                  max="999999.99"
                  step="0.01"
                  required
                  value="<%= transaction.amount %>"
                  placeholder="0.00"
                />
              </div>
              <div class="form-text">Montant entre 0,01€ et 999 999,99€</div>
            </div>

            <!-- Catégorie -->
            <div class="mb-3">
              <label for="category" class="form-label fw-bold"
                >Catégorie *</label
              >
              <select class="form-select" id="category" name="category">
                <option value="">Sélectionner une catégorie...</option>
                <!-- Les options seront ajoutées dynamiquement via JavaScript -->
              </select>

              <!-- Option nouvelle catégorie -->
              <div class="mt-2">
                <div class="form-check">
                  <input
                    class="form-check-input"
                    type="checkbox"
                    id="newCategoryToggle"
                  />
                  <label class="form-check-label" for="newCategoryToggle">
                    <i class="fas fa-plus me-1"></i>
                    Créer une nouvelle catégorie
                  </label>
                </div>

                <div id="newCategoryGroup" class="mt-2" style="display: none">
                  <input
                    type="text"
                    class="form-control"
                    id="newCategory"
                    name="newCategory"
                    maxlength="100"
                    placeholder="Nom de la nouvelle catégorie"
                  />
                  <div class="form-text">Maximum 100 caractères</div>
                </div>
              </div>
            </div>

            <!-- Date -->
            <div class="mb-3">
              <label for="date" class="form-label fw-bold">Date</label>
              <input
                type="date"
                class="form-control"
                id="date"
                name="date"
                value="<%= new Date(transaction.date).toISOString().split('T')[0] %>"
              />
            </div>

            <!-- Description -->
            <div class="mb-3">
              <label for="description" class="form-label fw-bold"
                >Description</label
              >
              <textarea
                class="form-control"
                id="description"
                name="description"
                rows="3"
                maxlength="255"
                placeholder="Description optionnelle de la transaction..."
              >
<%= transaction.description || '' %></textarea
              >
              <div class="form-text">
                <span id="charCount">0</span>/255 caractères
              </div>
            </div>

            <!-- Comparaison avant/après -->
            <div
              id="comparisonPreview"
              class="card bg-light"
              style="display: none"
            >
              <div class="card-body">
                <h6 class="card-title">
                  <i class="fas fa-exchange-alt me-2"></i>
                  Comparaison
                </h6>
                <div class="row">
                  <div class="col-md-6">
                    <h6 class="text-muted">Avant</h6>
                    <div id="beforeContent">
                      <!-- Contenu actuel -->
                    </div>
                  </div>
                  <div class="col-md-6">
                    <h6 class="text-muted">Après</h6>
                    <div id="afterContent">
                      <!-- Nouveau contenu -->
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Actions -->
          <div class="card-footer bg-light">
            <div class="d-flex justify-content-between">
              <a href="/transactions" class="btn btn-secondary">
                <i class="fas fa-arrow-left me-1"></i>
                Retour
              </a>
              <div>
                <a
                  href="/transactions/<%= transaction.id %>"
                  class="btn btn-outline-info me-2"
                >
                  <i class="fas fa-eye me-1"></i>
                  Voir
                </a>
                <button
                  type="button"
                  class="btn btn-outline-primary me-2"
                  id="compareBtn"
                >
                  <i class="fas fa-exchange-alt me-1"></i>
                  Comparer
                </button>
                <button type="submit" class="btn btn-warning">
                  <i class="fas fa-save me-1"></i>
                  Sauvegarder
                </button>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- JavaScript -->
<script>
  // Données des catégories et transaction actuelle
  const categories = {
    income: <%= JSON.stringify(categories.income) %>,
    expense: <%= JSON.stringify(categories.expense) %>
  };

  const originalTransaction = {
    type: '<%= transaction.type %>',
    amount: <%= transaction.amount %>,
    category: '<%= transaction.category %>',
    description: '<%= transaction.description || '' %>',
    date: '<%= new Date(transaction.date).toISOString().split('T')[0] %>'
  };

  document.addEventListener('DOMContentLoaded', function() {
    // Éléments du DOM
    const typeRadios = document.querySelectorAll('input[name="type"]');
    const categorySelect = document.getElementById('category');
    const newCategoryToggle = document.getElementById('newCategoryToggle');
    const newCategoryGroup = document.getElementById('newCategoryGroup');
    const newCategoryInput = document.getElementById('newCategory');
    const descriptionTextarea = document.getElementById('description');
    const charCount = document.getElementById('charCount');
    const compareBtn = document.getElementById('compareBtn');
    const comparisonPreview = document.getElementById('comparisonPreview');
    const form = document.getElementById('transactionForm');

    // Initialisation
    updateCategories();
    updateCharCount();
    updateBeforeContent();

    // Gestion du changement de type
    typeRadios.forEach(radio => {
      radio.addEventListener('change', function() {
        updateCategories();
        updateComparison();
      });
    });

    // Gestion du toggle nouvelle catégorie
    newCategoryToggle.addEventListener('change', function() {
      if (this.checked) {
        newCategoryGroup.style.display = 'block';
        categorySelect.disabled = true;
        categorySelect.value = '';
        newCategoryInput.focus();
      } else {
        newCategoryGroup.style.display = 'none';
        categorySelect.disabled = false;
        newCategoryInput.value = '';
      }
      updateComparison();
    });

    // Compteur de caractères
    descriptionTextarea.addEventListener('input', function() {
      updateCharCount();
      updateComparison();
    });

    // Mise à jour automatique de la comparaison
    const formInputs = ['amount', 'category', 'newCategory', 'date'];
    formInputs.forEach(inputId => {
      const input = document.getElementById(inputId);
      if (input) {
        input.addEventListener('input', updateComparison);
        input.addEventListener('change', updateComparison);
      }
    });

    // Bouton comparaison
    compareBtn.addEventListener('click', function() {
      updateComparison();
      if (comparisonPreview.style.display === 'none') {
        comparisonPreview.style.display = 'block';
        this.innerHTML = '<i class="fas fa-times me-1"></i>Masquer';
      } else {
        comparisonPreview.style.display = 'none';
        this.innerHTML = '<i class="fas fa-exchange-alt me-1"></i>Comparer';
      }
    });

    // Validation du formulaire
    form.addEventListener('submit', function(e) {
      e.preventDefault();

      if (validateForm()) {
        // Vérification des changements
        if (!hasChanges()) {
          if (!confirm('Aucune modification détectée. Voulez-vous continuer ?')) {
            return;
          }
        }

        // Animation de soumission
        const submitBtn = form.querySelector('button[type="submit"]');
        const originalText = submitBtn.innerHTML;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Sauvegarde...';
        submitBtn.disabled = true;

        // Soumission du formulaire
        setTimeout(() => {
          form.submit();
        }, 300);
      }
    });

    // Fonctions utilitaires
    function updateCategories() {
      const selectedType = document.querySelector('input[name="type"]:checked')?.value;
      const categoryList = selectedType ? categories[selectedType] : [];

      // Vider les options existantes
      categorySelect.innerHTML = '<option value="">Sélectionner une catégorie...</option>';

      // Ajouter les catégories
      categoryList.forEach(cat => {
        const option = document.createElement('option');
        option.value = cat;
        option.textContent = cat;

        // Sélection de la catégorie actuelle
        if (cat === originalTransaction.category && selectedType === originalTransaction.type) {
          option.selected = true;
        }

        categorySelect.appendChild(option);
      });
    }

    function updateCharCount() {
      const count = descriptionTextarea.value.length;
      charCount.textContent = count;
      charCount.className = count > 230 ? 'text-warning' : count > 250 ? 'text-danger' : 'text-muted';
    }

    function updateBeforeContent() {
      const formattedAmount = new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(originalTransaction.amount);

      const formattedDate = new Date(originalTransaction.date).toLocaleDateString('fr-FR');
      const typeLabel = originalTransaction.type === 'income' ? 'Revenu' : 'Dépense';
      const typeColor = originalTransaction.type === 'income' ? 'success' : 'danger';
      const typeIcon = originalTransaction.type === 'income' ? 'arrow-up' : 'arrow-down';

      document.getElementById('beforeContent').innerHTML = `
        <div class="border rounded p-2">
          <span class="badge bg-${typeColor} mb-2">
            <i class="fas fa-${typeIcon} me-1"></i>
            ${typeLabel}
          </span>
          <h6 class="mb-1">${originalTransaction.category}</h6>
          ${originalTransaction.description ? `<p class="text-muted small mb-1">${originalTransaction.description}</p>` : ''}
          <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">${formattedDate}</small>
            <strong class="text-${typeColor}">
              ${originalTransaction.type === 'income' ? '+' : '-'}${formattedAmount}
            </strong>
          </div>
        </div>
      `;
    }

    function updateComparison() {
      const type = document.querySelector('input[name="type"]:checked')?.value;
      const amount = document.getElementById('amount').value;
      const category = newCategoryToggle.checked ? newCategoryInput.value : categorySelect.value;
      const description = descriptionTextarea.value;
      const date = document.getElementById('date').value;

      if (!type || !amount || !category) {
        return;
      }

      const formattedAmount = new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: 'EUR'
      }).format(parseFloat(amount));

      const formattedDate = date ? new Date(date).toLocaleDateString('fr-FR') : '';
      const typeLabel = type === 'income' ? 'Revenu' : 'Dépense';
      const typeColor = type === 'income' ? 'success' : 'danger';
      const typeIcon = type === 'income' ? 'arrow-up' : 'arrow-down';

      // Détection des changements
      const hasTypeChange = type !== originalTransaction.type;
      const hasAmountChange = parseFloat(amount) !== originalTransaction.amount;
      const hasCategoryChange = category !== originalTransaction.category;
      const hasDescriptionChange = description !== originalTransaction.description;
      const hasDateChange = date !== originalTransaction.date;

      document.getElementById('afterContent').innerHTML = `
        <div class="border rounded p-2 ${hasChanges() ? 'border-warning' : ''}">
          <span class="badge bg-${typeColor} mb-2 ${hasTypeChange ? 'border border-warning' : ''}">
            <i class="fas fa-${typeIcon} me-1"></i>
            ${typeLabel}
          </span>
          <h6 class="mb-1 ${hasCategoryChange ? 'text-warning' : ''}">${category}</h6>
          ${description ? `<p class="text-muted small mb-1 ${hasDescriptionChange ? 'text-warning' : ''}">${description}</p>` : ''}
          <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted ${hasDateChange ? 'text-warning' : ''}">${formattedDate}</small>
            <strong class="text-${typeColor} ${hasAmountChange ? 'text-warning' : ''}">
              ${type === 'income' ? '+' : '-'}${formattedAmount}
            </strong>
          </div>
        </div>

        ${hasChanges() ? '<div class="mt-2"><small class="text-warning"><i class="fas fa-exclamation-triangle me-1"></i>Modifications détectées</small></div>' : ''}
      `;
    }

    function hasChanges() {
      const type = document.querySelector('input[name="type"]:checked')?.value;
      const amount = parseFloat(document.getElementById('amount').value);
      const category = newCategoryToggle.checked ? newCategoryInput.value : categorySelect.value;
      const description = descriptionTextarea.value;
      const date = document.getElementById('date').value;

      return type !== originalTransaction.type ||
             amount !== originalTransaction.amount ||
             category !== originalTransaction.category ||
             description !== originalTransaction.description ||
             date !== originalTransaction.date;
    }

    function validateForm() {
      let isValid = true;
      const errors = [];

      // Validation du type
      const type = document.querySelector('input[name="type"]:checked');
      if (!type) {
        errors.push('Le type de transaction est requis');
        isValid = false;
      }

      // Validation du montant
      const amount = parseFloat(document.getElementById('amount').value);
      if (!amount || amount < 0.01 || amount > 999999.99) {
        errors.push('Le montant doit être entre 0,01€ et 999 999,99€');
        isValid = false;
      }

      // Validation de la catégorie
      const category = newCategoryToggle.checked ? newCategoryInput.value : categorySelect.value;
      if (!category || category.trim().length === 0) {
        errors.push('La catégorie est requise');
        isValid = false;
      }

      // Affichage des erreurs
      if (!isValid) {
        showErrors(errors);
      }

      return isValid;
    }

    function showErrors(errors) {
      // Suppression des anciennes erreurs
      const oldAlert = document.querySelector('.alert-danger');
      if (oldAlert) {
        oldAlert.remove();
      }

      // Création de la nouvelle alerte
      const alert = document.createElement('div');
      alert.className = 'alert alert-danger';
      alert.innerHTML = `
        <h6><i class="fas fa-exclamation-triangle me-2"></i>Erreurs de validation :</h6>
        <ul class="mb-0">
          ${errors.map(error => `<li>${error}</li>`).join('')}
        </ul>
      `;

      // Insertion après l'alerte d'info
      const infoAlert = document.querySelector('.alert-info');
      infoAlert.parentNode.insertBefore(alert, infoAlert.nextSibling);

      // Scroll vers le haut
      alert.scrollIntoView({ behavior: 'smooth' });
    }
  });
</script>

<%- include('../layouts/footer') %>
